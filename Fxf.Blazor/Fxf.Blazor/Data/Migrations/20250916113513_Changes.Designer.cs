// <auto-generated />
using System;
using Fxf.Blazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fxf.Blazor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916113513_Changes")]
    partial class Changes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.HubActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("UserId");

                    b.ToTable("HubActivityLogs");
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.SignalRConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisconnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hub")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SignalRConnections");
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.WorkerResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Successful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WorkerResults", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserPasskey<string>", b =>
                {
                    b.Property<byte[]>("CredentialId")
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CredentialId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserPasskeys", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.HubActivityLog", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", "User")
                        .WithMany("HubActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.SignalRConnection", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.WorkerResults", b =>
                {
                    b.OwnsOne("Fxf.Blazor.Data.Entities.Translations", "BackendTranslations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("OldFileFound")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("TranslationsId")
                                .HasColumnType("int");

                            b1.Property<int>("TranslationsNeeded")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TranslationsId")
                                .IsUnique();

                            b1.ToTable("BackendTranslationRequests", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TranslationsId");

                            b1.OwnsMany("Fxf.Blazor.Data.Entities.TranslationRequests", "RequestedTranslations", b2 =>
                                {
                                    b2.Property<int>("TranslationsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("ChangeType")
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phrase")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TranslationsId", "Id");

                                    b2.ToTable("BackendTranslationRequests_RequestedTranslations");

                                    b2.WithOwner()
                                        .HasForeignKey("TranslationsId");
                                });

                            b1.OwnsMany("Fxf.Blazor.Data.Entities.TranslationResults", "ResultOfTranslating", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phrase")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("Successful")
                                        .HasColumnType("bit");

                                    b2.Property<int>("TranslationsId")
                                        .HasColumnType("int");

                                    b2.HasKey("Id");

                                    b2.HasIndex("TranslationsId");

                                    b2.ToTable("BackendTranslationResults", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("TranslationsId");
                                });

                            b1.Navigation("RequestedTranslations");

                            b1.Navigation("ResultOfTranslating");
                        });

                    b.OwnsOne("Fxf.Blazor.Data.Entities.Translations", "FrontendTranslations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("OldFileFound")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("TranslationsId")
                                .HasColumnType("int");

                            b1.Property<int>("TranslationsNeeded")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("TranslationsId")
                                .IsUnique();

                            b1.ToTable("FrontendTranslationResults", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TranslationsId");

                            b1.OwnsMany("Fxf.Blazor.Data.Entities.TranslationRequests", "RequestedTranslations", b2 =>
                                {
                                    b2.Property<int>("TranslationsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("ChangeType")
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phrase")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TranslationsId", "Id");

                                    b2.ToTable("FrontendTranslationResults_RequestedTranslations");

                                    b2.WithOwner()
                                        .HasForeignKey("TranslationsId");
                                });

                            b1.OwnsMany("Fxf.Blazor.Data.Entities.TranslationResults", "ResultOfTranslating", b2 =>
                                {
                                    b2.Property<int>("TranslationsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phrase")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("Successful")
                                        .HasColumnType("bit");

                                    b2.HasKey("TranslationsId", "Id");

                                    b2.ToTable("FrontendTranslationResults_ResultOfTranslating");

                                    b2.WithOwner()
                                        .HasForeignKey("TranslationsId");
                                });

                            b1.Navigation("RequestedTranslations");

                            b1.Navigation("ResultOfTranslating");
                        });

                    b.OwnsOne("Fxf.Blazor.Data.Entities.CleanupResults", "CleanupResults", b1 =>
                        {
                            b1.Property<int>("WorkerResultsId")
                                .HasColumnType("int");

                            b1.Property<bool>("ClientOldLanguageStored")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("OldTranslationResultsDeleted")
                                .HasColumnType("int");

                            b1.Property<bool>("ServerOldLanguageStored")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkerResultsId");

                            b1.ToTable("WorkerResults", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerResultsId");
                        });

                    b.OwnsOne("Fxf.Blazor.Data.Entities.CycleChecks", "CycleChecks", b1 =>
                        {
                            b1.Property<int>("WorkerResultsId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IgnoredLanguagesFound")
                                .HasColumnType("bit");

                            b1.Property<int>("LibreLanguagesCount")
                                .HasColumnType("int");

                            b1.Property<bool>("SettingsLoaded")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkerResultsId");

                            b1.ToTable("WorkerResults", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerResultsId");
                        });

                    b.OwnsOne("Fxf.Blazor.Data.Entities.LanguagesTranslations", "LanguagesTranslations", b1 =>
                        {
                            b1.Property<int>("WorkerResultsId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2");

                            b1.Property<int>("TranslationsDone")
                                .HasColumnType("int");

                            b1.Property<int>("TranslationsNeeded")
                                .HasColumnType("int");

                            b1.HasKey("WorkerResultsId");

                            b1.ToTable("WorkerResults", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerResultsId");

                            b1.OwnsMany("Fxf.Blazor.Data.Entities.TranslationError", "FailedTranslations", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("ErrorMessage")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OriginalText")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("TargetLanguage")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Time")
                                        .HasColumnType("datetime2");

                                    b2.Property<int>("WorkerResultsId")
                                        .HasColumnType("int");

                                    b2.HasKey("Id");

                                    b2.HasIndex("WorkerResultsId");

                                    b2.ToTable("FailedTranslations", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("WorkerResultsId");
                                });

                            b1.Navigation("FailedTranslations");
                        });

                    b.OwnsMany("Fxf.Blazor.Data.Entities.WorkerError", "ErrorMessages", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Time")
                                .HasColumnType("datetime2");

                            b1.Property<int>("WorkerResultsId")
                                .HasColumnType("int");

                            b1.Property<int>("WorkerStatus")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("WorkerResultsId");

                            b1.ToTable("WorkerErrorMessages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerResultsId");
                        });

                    b.OwnsMany("Fxf.Blazor.Data.Entities.TranslationError", "TranslationErrors", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ErrorMessage")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OriginalText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TargetLanguage")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Time")
                                .HasColumnType("datetime2");

                            b1.Property<int>("WorkerResultsId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("WorkerResultsId");

                            b1.ToTable("WorkerErrors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerResultsId");
                        });

                    b.Navigation("BackendTranslations")
                        .IsRequired();

                    b.Navigation("CleanupResults")
                        .IsRequired();

                    b.Navigation("CycleChecks")
                        .IsRequired();

                    b.Navigation("ErrorMessages");

                    b.Navigation("FrontendTranslations")
                        .IsRequired();

                    b.Navigation("LanguagesTranslations")
                        .IsRequired();

                    b.Navigation("TranslationErrors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserPasskey<string>", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Microsoft.AspNetCore.Identity.IdentityPasskeyData", "Data", b1 =>
                        {
                            b1.Property<byte[]>("IdentityUserPasskeyCredentialId");

                            b1.Property<byte[]>("AttestationObject")
                                .IsRequired();

                            b1.Property<byte[]>("ClientDataJson")
                                .IsRequired();

                            b1.Property<DateTimeOffset>("CreatedAt");

                            b1.Property<bool>("IsBackedUp");

                            b1.Property<bool>("IsBackupEligible");

                            b1.Property<bool>("IsUserVerified");

                            b1.Property<string>("Name");

                            b1.Property<byte[]>("PublicKey")
                                .IsRequired();

                            b1.Property<long>("SignCount");

                            b1.PrimitiveCollection<string>("Transports");

                            b1.HasKey("IdentityUserPasskeyCredentialId");

                            b1.ToTable("AspNetUserPasskeys");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("IdentityUserPasskeyCredentialId");
                        });

                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fxf.Blazor.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fxf.Blazor.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("HubActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
